generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId      String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  created_at    DateTime       @default(now())
  updated_at    DateTime       @updatedAt

  // リレーション定義（双方向リレーション）
  accounts      Account[]
  sessions      Session[]

  friendships   Friendship[]   @relation("UserFriendships")
  friends       Friendship[]   @relation("UserFriends")

  loansCredited Loan[]         @relation("CreditorLoans") // 貸主としてのリレーション
  loansDebited  Loan[]         @relation("DebtorLoans")   // 借主としてのリレーション

  @@map("users")
}

model Friendship {
  uid          String   // User.uid（友達リレーションの所有者）
  friend_uid   String   // 友達のUser.uid
  created_at   DateTime @default(now())

  // リレーション設定（外部キーはここに指定）
  user         User     @relation("UserFriendships", fields: [uid], references: [id])
  friend       User     @relation("UserFriends", fields: [friend_uid], references: [id])

  @@id([uid, friend_uid])

  @@map("friendships")
}

model Loan {
  loan_id           String         @id @default(uuid())
  creditor_uid      String
  debtor_uid        String
  title             String
  total_amount      Float
  remaining_amount  Float
  status            LoanStatus @default(PAYING)
  registered_at     DateTime
  created_at        DateTime       @default(now())
  updated_at        DateTime       @updatedAt

  creditor          User           @relation("CreditorLoans", fields: [creditor_uid], references: [id]) // 貸主
  debtor            User           @relation("DebtorLoans", fields: [debtor_uid], references: [id])   // 借主
  loan_histories    LoanHistory[]

  @@map("loans")
}

model LoanHistory {
  loan_history_id  String      @id @default(uuid())
  loan_id          String
  paid_at          DateTime
  paid_amount      Float
  memo             String
  created_at       DateTime    @default(now())
  updated_at       DateTime    @updatedAt

  loan             Loan        @relation(fields: [loan_id], references: [loan_id])

  @@map("loan_histories")
}

enum LoanStatus {
  PAYING
  PAID
}